AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "SAM template for backend and related functions"

Metadata:
  Globals:
    Function:
      Tracing: Active
    Api:
      Cors: 
        AllowMethods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        AllowHeaders: "'Accept-Encoding,Content-Encoding,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Client-ID,key,secret,session'"
        AllowOrigin: "'*'"

Resources:

  # define api gateway
  ApiGatewayBackend:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prd
      Name: get_layers_api

  ApiDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "api-${AWS::Region}.easylayers.dev"
      CertificateArn: arn:aws:acm:us-east-1:737802338670:certificate/74bbd679-a2eb-417b-b89c-a4dea0387397
  
  APIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: ApiDomain
    Properties: 
      DomainName: !Sub "api-${AWS::Region}.easylayers.dev"
      RestApiId: !Ref ApiGatewayBackend
      Stage: prd
      # BasePath: !Ref "AWS::Region"

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "api-${AWS::Region}.easylayers.dev"
      Type: A
      HostedZoneId: Z07945432O7XSGL2FJGD6
      AliasTarget:
        DNSName: !GetAtt ApiDomain.DistributionDomainName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ApiDomain.DistributionHostedZoneId

  # Needed layer Policy
  NeededLayerLambdaPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "needed-layers-lambda-policy-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "logs:CreateLogGroup"
                            ],
                            "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                            ],
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "lambda:ListFunctions",
                                "lambda:ListLayerVersions",
                                "lambda:ListLayers"
                            ],
                            "Resource": "*",
                            "Effect": "Allow",
                            "Sid": "VisualEditor0"
                        },
                        {
                            "Action": [
                                "lambda:GetLayerVersion",
                                "lambda:DeleteLayerVersion",
                                "lambda:AddLayerVersionPermission"
                            ],
                            "Resource": "*",
                            "Effect": "Allow",
                            "Sid": "VisualEditor1"
                        },
                        {
                            "Action": [
                                "s3:PutObject",
                                "s3:GetObjectAcl",
                                "s3:GetObject",
                                "logs:CreateLogStream",
                                "lambda:PublishLayerVersion",
                                "s3:ListBucket",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "*"
                            ],
                            "Effect": "Allow",
                            "Sid": "VisualEditor2"
                        }
                    ]
                }

  # Needed layers iam role
  NeededLayersLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/service-role/"
        RoleName: !Sub "needed-layers-lambda-role-${AWS::Region}"
        AssumeRolePolicyDocument: !Sub |
            {
                "Version":"2012-10-17",
                "Statement":[
                    {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": "lambda.amazonaws.com"
                      },
                      "Action": "sts:AssumeRole"
                  }
                ]
            }
        MaxSessionDuration: 3600
        ManagedPolicyArns:
          - !Ref NeededLayerLambdaPolicy


  # create all the needed layers
  CreateNeededLayer39arm:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import sys 
          import os
          import shutil
          import boto3
          from subprocess import run,CalledProcessError
          import urllib.request
          from zipfile import ZipFile
          import platform
          import cfnresponse

          try:
              from packaging.version import parse
          except ImportError:
              from pip._vendor.packaging.version import parse
              
          S3 = boto3.resource('s3')
          Bucket = S3.Bucket('easy-layers-${AWS::Region}')
          Lambda = boto3.client('lambda')

          def lambda_handler(event, context):
              # Test Access permision to S3
              try:
                  Bucket.objects.limit(count=1)
              except Exception:
                  return "This function has no access to this bucker or its not exists, please validate"
              # Test access to lambda resources
              try:
                  Lambda.list_functions()
              except Exception:
                  return "This function has no access to Lambda resources, please validate"
              # Create a new layer
              result = {} 
              for library in ['jsonschema','requests']:
                  new_library_arn = create_new(library , Bucket, Lambda)
                  result[library] = new_library_arn
                  print(new_library_arn)
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, result)
              return result

          def create_new(library, Bucket, Lambda):
              # Extract parameters from API
              library_version = None

              machine = 'arm64' if platform.machine() == 'aarch64' else platform.machine()
              run_time = 'python' + '.'.join(sys.version.split(' ')[0].split('.')[0:2])
              run_time_dash = 'py' + ''.join(sys.version.split(' ')[0].split('.')[0:2]) 

              
              # get the library name and if it has versions make it like such requests==2.28.1
              library_install = library if library_version is None else library + "==" + library_version
              # Check if the package  exists 
              max_version = 'x'
              max_version_and_lib = library + "==" + str(max_version)

              # make the layer name readable and consistent of an ARN and for S3
              library_and_version=None
              if library_version is None:
                  library_and_version=max_version_and_lib.replace('==','-')
              else:
                  library_and_version=library_install.replace('==','-')
              
              layer_name =  (library_and_version + '-' + run_time_dash + '-' + machine[0:3]).replace('.','-')

              # # Then check if Layer exists in the account already
              layer_exists = check_if_layer_exists(layer_name)
              # if layer exists return the Layer ARN
              if layer_exists:
                  return layer_exists
              # if layer doesn't exist the run the process of making a new layer
              # Make sure the dir is empty
              run(["rm" , "-rf", "/tmp/*"])
              # Prepare the dir 
              run(["mkdir" ,"/tmp/python" ])
              # Install the new libraries
              outcome = run(["python" , "-m" , "pip" , "install" , library_install  , "-t", "/tmp/python"], check=False, capture_output=True,text=True)
              # print logs
              print(f"returncode = {outcome.returncode}")
              print(f"output: \n {outcome.stdout}")
              
              # Calculate layer limit
              dir_size = run(["du" , "-sh", "/tmp/python"], capture_output=True, text=True)
              dir_size = dir_size.stdout.split()[0]
              dir_size = dir_size.split("M")[0]
              dir_size = dir_size if len(dir_size.split("K"))<2 else float(dir_size.split("K")[0])/1000
              
              if int(float(dir_size)) >= 250:
                  raise ValueError( "Couldn't run. Layer size is over limit.") 

              # Zip the installed libraries
              zip_directory("/tmp/python/" , "/tmp/python.zip")

              # Upload the library into S3
              try:
                  Bucket.upload_file("/tmp/python.zip", "layers_repository/" + layer_name + ".zip")
              except Exception as e:
                  raise e
              # Create a new layer
              try:
                  new_layer = Lambda.publish_layer_version(LayerName= layer_name,
                                                              Content= {
                                                                  'S3Bucket': 'easy-layers-${AWS::Region}',
                                                                  'S3Key':  "layers_repository/" + layer_name + ".zip"},
                                                              CompatibleRuntimes=[run_time],
                                                              CompatibleArchitectures=[machine])
              except Exception as e:
                  raise e
              # Return layer version ARN
              return new_layer["LayerVersionArn"]

          def check_if_layer_exists(layer_name):
              try:
                  list_layer_version = Lambda.list_layer_versions(LayerName=layer_name)["LayerVersions"][0]["LayerVersionArn"]
                  return list_layer_version
              except Exception:
                  pass
              
          def zip_directory(folder_path, zip_path):
              with ZipFile(zip_path, mode='w') as zipf:
                  len_dir_path = len(folder_path)
                  for root, _, files in os.walk(folder_path):
                      for file in files:
                          file_path = os.path.join(root, file)
                          zipf.write(file_path, 'python/'+file_path[len_dir_path:])
      FunctionName: create_needed_layers_39arm
      Handler: index.lambda_handler
      Runtime: python3.9
      Architectures: 
        - arm64
      Description: Creates Needed Layers For Python 3.9 ARM
      Timeout: 300
      Role: !GetAtt NeededLayersLambdaRole.Arn

  CreateNeededLayer39x86:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import sys 
          import os
          import shutil
          import boto3
          from subprocess import run,CalledProcessError
          import urllib.request
          from zipfile import ZipFile
          import platform
          import cfnresponse

          try:
              from packaging.version import parse
          except ImportError:
              from pip._vendor.packaging.version import parse
              
          S3 = boto3.resource('s3')
          Bucket = S3.Bucket('easy-layers-${AWS::Region}')
          Lambda = boto3.client('lambda')

          def lambda_handler(event, context):
              # Test Access permision to S3
              try:
                  Bucket.objects.limit(count=1)
              except Exception:
                  return "This function has no access to this bucker or its not exists, please validate"
              # Test access to lambda resources
              try:
                  Lambda.list_functions()
              except Exception:
                  return "This function has no access to Lambda resources, please validate"
              # Create a new layer
              result = {} 
              for library in ['jsonschema','requests']:
                  new_library_arn = create_new(library , Bucket, Lambda)
                  result[library] = new_library_arn
                  print(new_library_arn)
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, result)
              return result

          def create_new(library, Bucket, Lambda):
              # Extract parameters from API
              library_version = None

              machine = 'arm64' if platform.machine() == 'aarch64' else platform.machine()
              run_time = 'python' + '.'.join(sys.version.split(' ')[0].split('.')[0:2])
              run_time_dash = 'py' + ''.join(sys.version.split(' ')[0].split('.')[0:2]) 

              
              # get the library name and if it has versions make it like such requests==2.28.1
              library_install = library if library_version is None else library + "==" + library_version
              # Check if the package  exists 
              max_version = 'x'
              max_version_and_lib = library + "==" + str(max_version)

              # make the layer name readable and consistent of an ARN and for S3
              library_and_version=None
              if library_version is None:
                  library_and_version=max_version_and_lib.replace('==','-')
              else:
                  library_and_version=library_install.replace('==','-')
              
              layer_name =  (library_and_version + '-' + run_time_dash + '-' + machine[0:3]).replace('.','-')

              # # Then check if Layer exists in the account already
              layer_exists = check_if_layer_exists(layer_name)
              # if layer exists return the Layer ARN
              if layer_exists:
                  return layer_exists
              # if layer doesn't exist the run the process of making a new layer
              # Make sure the dir is empty
              run(["rm" , "-rf", "/tmp/*"])
              # Prepare the dir 
              run(["mkdir" ,"/tmp/python" ])
              # Install the new libraries
              outcome = run(["python" , "-m" , "pip" , "install" , library_install  , "-t", "/tmp/python"], check=False, capture_output=True,text=True)
              # print logs
              print(f"returncode = {outcome.returncode}")
              print(f"output: \n {outcome.stdout}")
              
              # Calculate layer limit
              dir_size = run(["du" , "-sh", "/tmp/python"], capture_output=True, text=True)
              dir_size = dir_size.stdout.split()[0]
              dir_size = dir_size.split("M")[0]
              dir_size = dir_size if len(dir_size.split("K"))<2 else float(dir_size.split("K")[0])/1000
              
              if int(float(dir_size)) >= 250:
                  raise ValueError( "Couldn't run. Layer size is over limit.") 

              # Zip the installed libraries
              zip_directory("/tmp/python/" , "/tmp/python.zip")

              # Upload the library into S3
              try:
                  Bucket.upload_file("/tmp/python.zip", "layers_repository/" + layer_name + ".zip")
              except Exception as e:
                  raise e
              # Create a new layer
              try:
                  new_layer = Lambda.publish_layer_version(LayerName= layer_name,
                                                              Content= {
                                                                  'S3Bucket': 'easy-layers-${AWS::Region}',
                                                                  'S3Key':  "layers_repository/" + layer_name + ".zip"},
                                                              CompatibleRuntimes=[run_time],
                                                              CompatibleArchitectures=[machine])
              except Exception as e:
                  raise e
              # Return layer version ARN
              return new_layer["LayerVersionArn"]

          def check_if_layer_exists(layer_name):
              try:
                  list_layer_version = Lambda.list_layer_versions(LayerName=layer_name)["LayerVersions"][0]["LayerVersionArn"]
                  return list_layer_version
              except Exception:
                  pass
              
          def zip_directory(folder_path, zip_path):
              with ZipFile(zip_path, mode='w') as zipf:
                  len_dir_path = len(folder_path)
                  for root, _, files in os.walk(folder_path):
                      for file in files:
                          file_path = os.path.join(root, file)
                          zipf.write(file_path, 'python/'+file_path[len_dir_path:])
      FunctionName: create_needed_layers_39x86
      Handler: index.lambda_handler
      Runtime: python3.9
      Architectures: 
        - x86_64
      Description: Creates Needed Layers For Python 3.9 x86
      Timeout: 300
      Role: !GetAtt NeededLayersLambdaRole.Arn

  CreateNeededLayer38arm:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import sys 
          import os
          import shutil
          import boto3
          from subprocess import run,CalledProcessError
          import urllib.request
          from zipfile import ZipFile
          import platform
          import cfnresponse

          try:
              from packaging.version import parse
          except ImportError:
              from pip._vendor.packaging.version import parse
              
          S3 = boto3.resource('s3')
          Bucket = S3.Bucket('easy-layers-${AWS::Region}')
          Lambda = boto3.client('lambda')

          def lambda_handler(event, context):
              # Test Access permision to S3
              try:
                  Bucket.objects.limit(count=1)
              except Exception:
                  return "This function has no access to this bucker or its not exists, please validate"
              # Test access to lambda resources
              try:
                  Lambda.list_functions()
              except Exception:
                  return "This function has no access to Lambda resources, please validate"
              # Create a new layer
              result = {} 
              for library in ['jsonschema','requests']:
                  new_library_arn = create_new(library , Bucket, Lambda)
                  result[library] = new_library_arn
                  print(new_library_arn)
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, result)
              return result

          def create_new(library, Bucket, Lambda):
              # Extract parameters from API
              library_version = None

              machine = 'arm64' if platform.machine() == 'aarch64' else platform.machine()
              run_time = 'python' + '.'.join(sys.version.split(' ')[0].split('.')[0:2])
              run_time_dash = 'py' + ''.join(sys.version.split(' ')[0].split('.')[0:2]) 

              
              # get the library name and if it has versions make it like such requests==2.28.1
              library_install = library if library_version is None else library + "==" + library_version
              # Check if the package  exists 
              max_version = 'x'
              max_version_and_lib = library + "==" + str(max_version)

              # make the layer name readable and consistent of an ARN and for S3
              library_and_version=None
              if library_version is None:
                  library_and_version=max_version_and_lib.replace('==','-')
              else:
                  library_and_version=library_install.replace('==','-')
              
              layer_name =  (library_and_version + '-' + run_time_dash + '-' + machine[0:3]).replace('.','-')

              # # Then check if Layer exists in the account already
              layer_exists = check_if_layer_exists(layer_name)
              # if layer exists return the Layer ARN
              if layer_exists:
                  return layer_exists
              # if layer doesn't exist the run the process of making a new layer
              # Make sure the dir is empty
              run(["rm" , "-rf", "/tmp/*"])
              # Prepare the dir 
              run(["mkdir" ,"/tmp/python" ])
              # Install the new libraries
              outcome = run(["python" , "-m" , "pip" , "install" , library_install  , "-t", "/tmp/python"], check=False, capture_output=True,text=True)
              # print logs
              print(f"returncode = {outcome.returncode}")
              print(f"output: \n {outcome.stdout}")
              
              # Calculate layer limit
              dir_size = run(["du" , "-sh", "/tmp/python"], capture_output=True, text=True)
              dir_size = dir_size.stdout.split()[0]
              dir_size = dir_size.split("M")[0]
              dir_size = dir_size if len(dir_size.split("K"))<2 else float(dir_size.split("K")[0])/1000
              
              if int(float(dir_size)) >= 250:
                  raise ValueError( "Couldn't run. Layer size is over limit.") 

              # Zip the installed libraries
              zip_directory("/tmp/python/" , "/tmp/python.zip")

              # Upload the library into S3
              try:
                  Bucket.upload_file("/tmp/python.zip", "layers_repository/" + layer_name + ".zip")
              except Exception as e:
                  raise e
              # Create a new layer
              try:
                  new_layer = Lambda.publish_layer_version(LayerName= layer_name,
                                                              Content= {
                                                                  'S3Bucket': 'easy-layers-${AWS::Region}',
                                                                  'S3Key':  "layers_repository/" + layer_name + ".zip"},
                                                              CompatibleRuntimes=[run_time],
                                                              CompatibleArchitectures=[machine])
              except Exception as e:
                  raise e
              # Return layer version ARN
              return new_layer["LayerVersionArn"]

          def check_if_layer_exists(layer_name):
              try:
                  list_layer_version = Lambda.list_layer_versions(LayerName=layer_name)["LayerVersions"][0]["LayerVersionArn"]
                  return list_layer_version
              except Exception:
                  pass
              
          def zip_directory(folder_path, zip_path):
              with ZipFile(zip_path, mode='w') as zipf:
                  len_dir_path = len(folder_path)
                  for root, _, files in os.walk(folder_path):
                      for file in files:
                          file_path = os.path.join(root, file)
                          zipf.write(file_path, 'python/'+file_path[len_dir_path:])
      FunctionName: create_needed_layers_38arm
      Handler: index.lambda_handler
      Runtime: python3.8
      Architectures: 
        - arm64
      Description: Creates Needed Layers For Python 3.8 ARM
      Timeout: 300
      Role: !GetAtt NeededLayersLambdaRole.Arn

  CreateNeededLayer38x86:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import sys 
          import os
          import shutil
          import boto3
          from subprocess import run,CalledProcessError
          import urllib.request
          from zipfile import ZipFile
          import platform
          import cfnresponse

          try:
              from packaging.version import parse
          except ImportError:
              from pip._vendor.packaging.version import parse
              
          S3 = boto3.resource('s3')
          Bucket = S3.Bucket('easy-layers-${AWS::Region}')
          Lambda = boto3.client('lambda')

          def lambda_handler(event, context):
              # Test Access permision to S3
              try:
                  Bucket.objects.limit(count=1)
              except Exception:
                  return "This function has no access to this bucker or its not exists, please validate"
              # Test access to lambda resources
              try:
                  Lambda.list_functions()
              except Exception:
                  return "This function has no access to Lambda resources, please validate"
              # Create a new layer
              result = {} 
              for library in ['jsonschema','requests']:
                  new_library_arn = create_new(library , Bucket, Lambda)
                  result[library] = new_library_arn
                  print(new_library_arn)
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, result)
              return result

          def create_new(library, Bucket, Lambda):
              # Extract parameters from API
              library_version = None

              machine = 'arm64' if platform.machine() == 'aarch64' else platform.machine()
              run_time = 'python' + '.'.join(sys.version.split(' ')[0].split('.')[0:2])
              run_time_dash = 'py' + ''.join(sys.version.split(' ')[0].split('.')[0:2]) 

              
              # get the library name and if it has versions make it like such requests==2.28.1
              library_install = library if library_version is None else library + "==" + library_version
              # Check if the package  exists 
              max_version = 'x'
              max_version_and_lib = library + "==" + str(max_version)

              # make the layer name readable and consistent of an ARN and for S3
              library_and_version=None
              if library_version is None:
                  library_and_version=max_version_and_lib.replace('==','-')
              else:
                  library_and_version=library_install.replace('==','-')
              
              layer_name =  (library_and_version + '-' + run_time_dash + '-' + machine[0:3]).replace('.','-')

              # # Then check if Layer exists in the account already
              layer_exists = check_if_layer_exists(layer_name)
              # if layer exists return the Layer ARN
              if layer_exists:
                  return layer_exists
              # if layer doesn't exist the run the process of making a new layer
              # Make sure the dir is empty
              run(["rm" , "-rf", "/tmp/*"])
              # Prepare the dir 
              run(["mkdir" ,"/tmp/python" ])
              # Install the new libraries
              outcome = run(["python" , "-m" , "pip" , "install" , library_install  , "-t", "/tmp/python"], check=False, capture_output=True,text=True)
              # print logs
              print(f"returncode = {outcome.returncode}")
              print(f"output: \n {outcome.stdout}")
              
              # Calculate layer limit
              dir_size = run(["du" , "-sh", "/tmp/python"], capture_output=True, text=True)
              dir_size = dir_size.stdout.split()[0]
              dir_size = dir_size.split("M")[0]
              dir_size = dir_size if len(dir_size.split("K"))<2 else float(dir_size.split("K")[0])/1000
              
              if int(float(dir_size)) >= 250:
                  raise ValueError( "Couldn't run. Layer size is over limit.") 

              # Zip the installed libraries
              zip_directory("/tmp/python/" , "/tmp/python.zip")

              # Upload the library into S3
              try:
                  Bucket.upload_file("/tmp/python.zip", "layers_repository/" + layer_name + ".zip")
              except Exception as e:
                  raise e
              # Create a new layer
              try:
                  new_layer = Lambda.publish_layer_version(LayerName= layer_name,
                                                              Content= {
                                                                  'S3Bucket': 'easy-layers-${AWS::Region}',
                                                                  'S3Key':  "layers_repository/" + layer_name + ".zip"},
                                                              CompatibleRuntimes=[run_time],
                                                              CompatibleArchitectures=[machine])
              except Exception as e:
                  raise e
              # Return layer version ARN
              return new_layer["LayerVersionArn"]

          def check_if_layer_exists(layer_name):
              try:
                  list_layer_version = Lambda.list_layer_versions(LayerName=layer_name)["LayerVersions"][0]["LayerVersionArn"]
                  return list_layer_version
              except Exception:
                  pass
              
          def zip_directory(folder_path, zip_path):
              with ZipFile(zip_path, mode='w') as zipf:
                  len_dir_path = len(folder_path)
                  for root, _, files in os.walk(folder_path):
                      for file in files:
                          file_path = os.path.join(root, file)
                          zipf.write(file_path, 'python/'+file_path[len_dir_path:])
      FunctionName: create_needed_layers_38x86
      Handler: index.lambda_handler
      Runtime: python3.8
      Architectures: 
        - x86_64
      Description: Creates Needed Layers For Python 3.8 x86
      Timeout: 300
      Role: !GetAtt NeededLayersLambdaRole.Arn


  TriggerNeededLayers39arm:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: CreateNeededLayer39arm
    Properties:
      ServiceToken: !GetAtt CreateNeededLayer39arm.Arn

  TriggerNeededLayers39x86:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: CreateNeededLayer39x86
    Properties:
      ServiceToken: !GetAtt CreateNeededLayer39x86.Arn

  TriggerNeededLayers38arm:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: CreateNeededLayer38arm
    Properties:
      ServiceToken: !GetAtt CreateNeededLayer38arm.Arn

  TriggerNeededLayers38x86:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: CreateNeededLayer38x86
    Properties:
      ServiceToken: !GetAtt CreateNeededLayer38x86.Arn

  
  # define the Lambda function and its code
  CreateLayer39x86:
    Type: AWS::Serverless::Function
    DependsOn: TriggerNeededLayers39x86
    Properties:
      CodeUri:
        Bucket: !Sub "easy-layers-${AWS::Region}"
        Key: functions/src/deployment_easy_layers.zip
      FunctionName: create_layer_easy_layers_39x86
      Handler: create_layer.lambda_handler
      Runtime: python3.9
      Architectures: 
        - x86_64
      Description: Creates & Checks If A Layer Exists When Someone Submits Python 3.9
      Timeout: 300
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayBackend
            Path: /create_layer39x86
            Method: post
      Layers:
        - !GetAtt TriggerNeededLayers39x86.jsonschema
        - !GetAtt TriggerNeededLayers39x86.requests
      Policies:
        Statement:
          - Effect: Allow
            Action: 
              - logs:CreateLogGroup
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - lambda:ListFunctions
              - lambda:ListLayerVersions
              - lambda:ListLayers
            Resource: "*"
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - lambda:GetLayerVersion
              - lambda:DeleteLayerVersion
              - lambda:AddLayerVersionPermission
            Resource: "*"
          - Sid: VisualEditor2
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObjectAcl
              - s3:GetObject
              - logs:CreateLogStream
              - lambda:PublishLayerVersion
              - s3:ListBucket
              - logs:PutLogEvents
            Resource:
              - "*"
  # define the Lambda function and its code
  CreateLayer38x86:
    Type: AWS::Serverless::Function
    DependsOn: TriggerNeededLayers38x86
    Properties:
      CodeUri:
        Bucket: !Sub "easy-layers-${AWS::Region}"
        Key: functions/src/deployment_easy_layers.zip
      FunctionName: create_layer_easy_layers_38x86
      Handler: create_layer.lambda_handler
      Runtime: python3.8
      Architectures: 
        - x86_64
      Description: Creates & Checks If A Layer Exists When Someone Submits Python 3.8
      Timeout: 300
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayBackend
            Path: /create_layer38x86
            Method: post
      Layers:
        - !GetAtt TriggerNeededLayers38x86.jsonschema
        - !GetAtt TriggerNeededLayers38x86.requests
      Policies:
        Statement:
          - Effect: Allow
            Action: 
              - logs:CreateLogGroup
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - lambda:ListFunctions
              - lambda:ListLayerVersions
              - lambda:ListLayers
            Resource: "*"
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - lambda:GetLayerVersion
              - lambda:DeleteLayerVersion
              - lambda:AddLayerVersionPermission
            Resource: "*"
          - Sid: VisualEditor2
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObjectAcl
              - s3:GetObject
              - logs:CreateLogStream
              - lambda:PublishLayerVersion
              - s3:ListBucket
              - logs:PutLogEvents
            Resource:
              - "*"

  # define the Lambda function and its code
  CreateLayer39arm:
    Type: AWS::Serverless::Function
    DependsOn: TriggerNeededLayers39arm
    Properties:
      CodeUri:
        Bucket: !Sub "easy-layers-${AWS::Region}"
        Key: functions/src/deployment_easy_layers.zip
      FunctionName: create_layer_easy_layers_39arm
      Handler: create_layer.lambda_handler
      Runtime: python3.9
      Architectures: 
        - arm64
      Description: Creates & Checks If A Layer Exists When Someone Submits Python 3.9
      Timeout: 300
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayBackend
            Path: /create_layer39arm
            Method: post
      Layers:
        - !GetAtt TriggerNeededLayers39arm.jsonschema
        - !GetAtt TriggerNeededLayers39arm.requests
      Policies:
        Statement:
          - Effect: Allow
            Action: 
              - logs:CreateLogGroup
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - lambda:ListFunctions
              - lambda:ListLayerVersions
              - lambda:ListLayers
            Resource: "*"
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - lambda:GetLayerVersion
              - lambda:DeleteLayerVersion
              - lambda:AddLayerVersionPermission
            Resource: "*"
          - Sid: VisualEditor2
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObjectAcl
              - s3:GetObject
              - logs:CreateLogStream
              - lambda:PublishLayerVersion
              - s3:ListBucket
              - logs:PutLogEvents
            Resource:
              - "*"
  # define the Lambda function and its code
  CreateLayer38arm:
    Type: AWS::Serverless::Function
    DependsOn: TriggerNeededLayers38arm
    Properties:
      CodeUri:
        Bucket: !Sub "easy-layers-${AWS::Region}"
        Key: functions/src/deployment_easy_layers.zip
      FunctionName: create_layer_easy_layers_38arm
      Handler: create_layer.lambda_handler
      Runtime: python3.8
      Architectures: 
        - arm64
      Description: Creates & Checks If A Layer Exists When Someone Submits Python 3.8
      Timeout: 300
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayBackend
            Path: /create_layer38arm
            Method: post
      Layers:
        - !GetAtt TriggerNeededLayers38arm.jsonschema
        - !GetAtt TriggerNeededLayers38arm.requests
      Policies:
        Statement:
          - Effect: Allow
            Action: 
              - logs:CreateLogGroup
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - lambda:ListFunctions
              - lambda:ListLayerVersions
              - lambda:ListLayers
            Resource: "*"
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - lambda:GetLayerVersion
              - lambda:DeleteLayerVersion
              - lambda:AddLayerVersionPermission
            Resource: "*"
          - Sid: VisualEditor2
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObjectAcl
              - s3:GetObject
              - logs:CreateLogStream
              - lambda:PublishLayerVersion
              - s3:ListBucket
              - logs:PutLogEvents
            Resource:
              - "*"

  GetLayers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub "easy-layers-${AWS::Region}"
        Key: functions/src/deployment_easy_layers.zip
      Handler: get_layers.lambda_handler
      Runtime: python3.9
      FunctionName: get_layers_easy_layers
      Description: Grabs all the layers
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayBackend
            Path: /get_layers
            Method: get 
      Policies:
        - Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - lambda:GetLayerVersion
                - lambda:ListLayerVersions
                - lambda:ListLayers
              Resource: "*"
            - Sid: VisualEditor1
              Effect: Allow
              Action:
                - s3:ListBucket
                - logs:CreateLogGroup
                - s3:GetObjectAcl
                - s3:GetObject
              Resource:
                - !Sub "arn:aws:s3:::easy-layers-${AWS::Region}"
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
            - Sid: VisualEditor2
              Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/easy_layers_get_layers:*"

  